Gives you the ~create-ob-npx~ macro which when executed will define an org babel languages that evaluates code by passing it through =npx=.

=npx= is a utility (installed alongside more reent versions of =npm=) that will install an =npm= package and dependencies into a sandbox and execute a binary or other node command within it.
* Examples
:PROPERTIES:
:header-args: :exports both
:END:

This means you can for exxample create the ability to evaluate typescript src blocks without the user being forced to install anything globally (besides =npm/x= itself) by using =npx= to call into the ts-node package.

#+begin_src emacs-lisp :results silent
  (create-ob-npx "ob-typescript" "typescript" "ts-node" ".ts")
  (add-to-list 'org-babel-tangle-lang-exts '("typescript" . "ts"))
#+end_src


#+begin_src typescript
  const foo : string = "Hi there"
  console.log(foo)
#+end_src

#+RESULTS:
: Hi there



Want coffeescript? that works too. Although the command we apss to =npx= has to be a bit more complex

#+begin_src emacs-lisp :results silent
  (create-ob-npx "ob-coffeescript" "coffeescript" "-p coffeescript -- coffee")
#+end_src

#+begin_src coffeescript
  console.log "#{ 22 / 7 } is a decent approximation of π"
#+end_src

#+RESULTS:
: 3.142857142857143 is a decent approximation of π


What about something like mermaidjs? For mermaid we need to tell it to ignore the stdout generated by the command and instead insert the filename so that it can be correctly embedded in a document


#+begin_src emacs-lisp :results silent
  (create-ob-npx "ob-mermaid-npx" "mmd" "-p @mermaid-js/mermaid-cli -- mmdc -o ./output.png -b transparent -i" ".mmd" (lambda (_) "./output.png"))
#+end_src

At the moment this only allows a single output filename but it *does* work

#+begin_src mmd  :results file
pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15
#+end_src

#+RESULTS:
[[file:./output.png]]

